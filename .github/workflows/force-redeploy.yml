name: Force Redeploy Stack

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: 'latest'
        type: string
      method:
        description: 'Deploy method'
        required: false
        default: 'service-update'
        type: choice
        options:
          - 'service-update'
          - 'stack-restart'
          - 'git-redeploy'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    environment: production
    
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: ap-platform-frontend
      
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if Docker image exists in ECR
        run: |
          echo "üîç Verificando se a imagem existe no ECR..."
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ inputs.image_tag }}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          
          # Check if image exists
          aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids imageTag=${{ inputs.image_tag }} \
            --region ${{ env.AWS_REGION }} \
            --output table
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Imagem encontrada: $IMAGE_URI"
          else
            echo "‚ùå Imagem n√£o encontrada no ECR!"
            exit 1
          fi

      - name: Force Deploy to Portainer
        run: |
          echo "üöÄ For√ßando redeploy no Portainer usando m√©todo: ${{ inputs.method }}"
          echo "Image URI: ${{ env.IMAGE_URI }}"
          
          case "${{ inputs.method }}" in
            "service-update")
              echo "üîÑ M√©todo: Atualiza√ß√£o for√ßada de servi√ßos"
              
              # Get all services in the stack
              echo "üìã Obtendo servi√ßos do stack..."
              SERVICES=$(curl -s -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
                "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/services" | \
                jq -r '.[] | select(.Spec.Labels."com.docker.stack.namespace" == "agentpay-frontend") | .ID')
              
              if [[ -z "$SERVICES" ]]; then
                echo "‚ùå Nenhum servi√ßo encontrado. Tentando buscar por outro m√©todo..."
                
                # Alternative: try to get services directly
                SERVICES=$(curl -s -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
                  "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/services" | \
                  jq -r '.[] | select(.Spec.Name | contains("frontend")) | .ID')
              fi
              
              if [[ -n "$SERVICES" ]]; then
                echo "‚úÖ Servi√ßos encontrados:"
                echo "$SERVICES"
                
                # Force update each service
                for SERVICE_ID in $SERVICES; do
                  echo "üîÑ Atualizando servi√ßo: $SERVICE_ID"
                  
                  # Get current service spec
                  SERVICE_SPEC=$(curl -s -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
                    "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/services/$SERVICE_ID")
                  
                  # Extract version for optimistic locking
                  VERSION=$(echo "$SERVICE_SPEC" | jq -r '.Version.Index')
                  
                  # Force update with incremented ForceUpdate
                  RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                    "${{ secrets.PORTAINER_URL }}/api/endpoints/1/docker/services/$SERVICE_ID/update?version=$VERSION" \
                    -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
                    -H "Content-Type: application/json" \
                    -d '{
                      "TaskTemplate": {
                        "ForceUpdate": 1
                      }
                    }')
                  
                  HTTP_CODE="${RESPONSE: -3}"
                  echo "Servi√ßo $SERVICE_ID - HTTP: $HTTP_CODE"
                done
              else
                echo "‚ùå Nenhum servi√ßo encontrado para atualizar"
                exit 1
              fi
              ;;
              
            "stack-restart")
              echo "üîÑ M√©todo: Restart completo do stack"
              
              # Stop stack
              echo "üõë Parando stack..."
              RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                "${{ secrets.PORTAINER_URL }}/api/stacks/${{ secrets.PORTAINER_STACK_ID }}/stop?endpointId=1" \
                -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}")
              
              HTTP_CODE="${RESPONSE: -3}"
              echo "Stop stack - HTTP: $HTTP_CODE"
              
              if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
                echo "‚è≥ Aguardando 15 segundos..."
                sleep 15
                
                # Start stack
                echo "‚ñ∂Ô∏è  Iniciando stack..."
                RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                  "${{ secrets.PORTAINER_URL }}/api/stacks/${{ secrets.PORTAINER_STACK_ID }}/start?endpointId=1" \
                  -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}")
                
                HTTP_CODE="${RESPONSE: -3}"
                echo "Start stack - HTTP: $HTTP_CODE"
                
                if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
                  echo "‚úÖ Stack reiniciado com sucesso!"
                else
                  echo "‚ùå Falha ao iniciar stack"
                  exit 1
                fi
              else
                echo "‚ùå Falha ao parar stack"
                exit 1
              fi
              ;;
              
            "git-redeploy")
              echo "üîÑ M√©todo: Git redeploy (apenas para stacks Git)"
              
              RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                "${{ secrets.PORTAINER_URL }}/api/stacks/${{ secrets.PORTAINER_STACK_ID }}/git/redeploy" \
                -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
                -H "Content-Type: application/json" \
                -d '{
                  "pullImage": true,
                  "prune": true
                }')
              
              HTTP_CODE="${RESPONSE: -3}"
              RESPONSE_BODY="${RESPONSE%???}"
              
              echo "Git redeploy - HTTP: $HTTP_CODE"
              echo "Response: $RESPONSE_BODY"
              
              if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
                echo "‚úÖ Git redeploy realizado!"
              else
                echo "‚ùå Git redeploy falhou"
                exit 1
              fi
              ;;
          esac

      - name: Verify deployment
        run: |
          echo "üîç Verificando deploy..."
          echo "‚è≥ Aguardando containers reiniciarem (45s)..."
          sleep 45
          
          echo "üéâ Processo de redeploy conclu√≠do!"
          echo "üåê Verifique: https://${{ secrets.FRONTEND_DOMAIN }}"
          echo "üê≥ Verifique no Portainer se o timestamp 'Last Update' mudou"
